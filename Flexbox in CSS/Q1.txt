Q1. Describe the main difference between the CSS Flexbox layout model and the CSS Grid layout model. when
would you choose to use one over the other?
CSS Grid and Flexbox are layout models that share similarities and can even be used together. The main difference is that you can use CSS Grid to create two-dimensional layouts. In contrast, you can only use Flexbox to create one-dimensional layouts.
 That means you can place components along the X- and Y-axis in CSS Grid and only one axis in Flexbox.
-> Flexbox
Flexbox can work on either rows or columns at a time, but Grids can work on both. Flexbox gives you more flexibility while working on either element (row or column).
Grid
Grid can easily render rows and columns simultaneously. With CSS Grid, you can set relationships horizontally and vertically at the same time.

You might choose Flexbox when you need to arrange itens along a single axis, for example, when creating navigation bars, header/footer layouts, or aligning elements within a container Flexbox is great for responsive designs where items can vary in size.

You might choose CSS Grid when you need to create more complex, two-dimensional layouts with rows and columns. It's particularly useful when you have a grid-like structure, such as galleries, forms with multiple fields. or any design that requires precise control over both rows and columns.

In some cases, you may even combine both Flexbox and CSS Grid within a single layout to leverage the strengths of each model for different parts of your webpage

Q2. Explain the role of the following key properties in the Flexbox layout model

1 justify-content
2. align-items
3. gap
4. flex-direction
5. flex-wrap
Ans)
1. justify-content: The justify-content property in Flexbox is used to control the alignment of flex items along the main axis of the flex container. It determines how the extra space or insufficient space along the main axis is distributed. There are several values for justify-content, including flex-start, flex-end, center, space- between, space-evenly and space-around.
For example, if you set justify-content: center, flex items will be centered along the main axis of the container. If you set justify-content: space-between;, the first item will be aligned to the start, the last item to the end, and the remaining space will be distributed evenly between the items.
2. align-items: The align-items property controls the alignment of flex items along the cross axis of the flex
container. It specifies how items are positioned within their container along this axis. It accepts values such
as flex-start, flex-end, center, baseline, and stretch.
For instance, if you set align-items: center;, flex items will be vertically centered within the container. If you
3.
gap: The gap property is used to define the space between flex items in both directions, both along the main axis and the cross axis. It's often applied to the flex container itself. It simplifies spacing and creates consistent gaps between items without needing to apply margins to individual items.
For example, if you set gap: 20px;, there will be a 20-pixel gap between adjacent flex items in both the
4.
horizontal and vertical directions, improving the overall spacing and alignment of items within the container. flex-direction: The flex-direction property determines the direction in which flex items are placed within the flex container. It defines the main axis and, consequently, the layout flow. It can have values such as row, row-reverse, column, or column-reverse.
5.
flex-wrap: The flex-wrap property controls whether flex items are allowed to wrap onto multiple lines (new rows or columns) within the flex container when they don't fit along the main axis. It accepts values like nowrap, wrap, and wrap-reverse.
For instance, if you set flex-wrap: wrap;, flex items will wrap to the next line when there's not enough space
on the current line, creating a multi-line layout. flex-wrap is useful for accommodating various screen sizes and orientations, allowing items to adapt to different viewports and preventing content from getting cut off.
These properties play a critical role in creating well-structured and visually pleasing layouts in Flexbox, allowing you to control the positioning, alignment, and spacing of flex items within a container.
